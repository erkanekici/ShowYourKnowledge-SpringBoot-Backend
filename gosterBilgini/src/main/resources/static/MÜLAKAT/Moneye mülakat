Tuğrul Yılmazer - son github aktivitesi: 2018 materialUI hakkında
MONEYE: Messenger uygulaması üzerinden kullanıcı masraflarını alıyor hedefine ve limitine göre tasarruf tavsiyesinde bulunuyor.

yazılım mimarisinde c4 modeli : ontext, Containers, Components and Code
https://c4model.com/

http://tutorials.jenkov.com/java-performance/resizable-array.html

Neyi araştıracağını ve nasıl araştıracağını bilmezsen kendini bir okyanusta bulursun. O yüzden cevabı aranılan şeyle ilgili alt soruları
üretebilme kabiliyeti önemlidir ve gerek doğru sonuca ulaşmada zaman kazandırması gerekse doğru tahminleyebilme bakımından kişiye
üstünlük kazandıran bir özelliktir.

Fizikçi Enrico Fermi'nin üniversitedeyken bir yılda yenilen pizza alanı sorusu gibi tahminleme ile ilgili bir soru. 
Bu tür sorularda öncelikle cevapla ilşkili istatistiki bir veriye erişebilinir mi ona bakmak lazım,
mesela haftalık satılan pizza sayısı, bir pizzanın alanı gibi. Bu istatistiklere göre biraz da sezgisel yaklaşmak gerekir.
Normalde haftalık 100 pizza satılıyorsa festival döneminde 300 olmuştur gibi.

Normalde sezigesel yaklaşıp sayıca çok olmadığını düşündüğüm için googleda istanbul piyano tamiri diye aratır ona göre tahminde bulunurdum :)
Fakat şu an burada da sezgi ve istatistiksel veriden faydalanıcam. Öncelikle istanbul nüfusu ne kadar, yaklaşık 16 milyon ve
ortalama her aile 4 kişiden oluşsa 4 milyon aile eder.
Yine sezgisel olarak çevremde ve toplumumuzdaki piyano çalma ilgisine göre kendi gözlemlerime dayanarak(zaman olmadığı için anket yapamam)
bu 4 milyon ailenin bin'de 1'inde piyano vardır. 4 bin piyano eder. Her ay %5 yani 200 tanesi arıza yapsa ve
1 tamirci ayda 10 piyano tamir ediyor olsa 20 tane tamir yeri yeter.

Bu arada Enriconun abd de ilk atom bombası denemesinin gözlemcilerinden olduğu ve orada da elindeki küçük kağıt parçaları
ile bombanın patladıktan sonraki şok dalgasının kağıtları etkileme süresi ile yaklaşık kağıtları havalandırdığı yüksekliği
ölçerek patlama şiddeti ile ilgili tahmin yürüttüğüne dair bir şey okumuştum.

------------------------------------------------------------------------------------------------------------------------------------------------------------- 
Gosterbilgini Uygulamam - GİT - HEROKU

Agile ortamlarda işler büyük bloklar yerine, küçük parçalar şeklinde ele alnır.Bu parçalara backlog adı verilir.

Concurency: Future nesnesi, thread

Apache Kafka: Broker > topic > partiton
			  dağıtık(distrubuted) bir sistemdir, bir broker çökse bile veri kaybı olmaması ve işlemlerin devam ediyor olması gereklidir. Replikasyon bu işi yapar. 
Hbase: Key Value Store nosql db ( CAP'ın CP si consistency ve partiton, no availability)

Swagger ile web api dokümantasyon

Cache: Sistem hızını artıran bir mekanizma. Uygulamada sık kullanılan verilerin her defasında db den veya remote servislerden alınması gerekmiyorsa önbelleğe alınması uygulama hızını artırır. @EnableCaching ve @Cacheable, Redis
Redis: nosql db. verileri RAM üzerinde saklar, performans açısından büyük bir artış sağlar. İstersek belirli zaman aralıkları ile verileri disk’e kaydeder bu sayede veri tutarlılığı da sağlanabilir. 
	   cache,session,kuyruk işlemlerinde kullanılır
	   Ram ihtiyacını artırır, cpu kullanımını ve IO işlemlerini azaltır. join işlemlerini desteklemez.

Best practisleri araştırırım

Mikroservis ve docker ( CI - CD )
openshift-kubernetes ile konteynır orkestrasyonu
istio ile request takip

Dependency Injectıon: Modülerlik için bağımlı olunan sınıf nesnesini her defasında new ile çağırmak yerine autowired etmek veya interface olarak implement etmek uygun. beanler

S:
O:
L:
I:
D:

12APP Factor: Herokunun eskiden belirlediği mikroservis ve cloud mimarilerine uygun proje geliştirme için prensipler

AOP:

Lambda Functions: Bu fonksiyonlar başka bir fonksiyona argüman olarak iletilebilir. Böylece, bir tarafta tanımlanan iş birimi, diğer bir iş biriminde koşturulabilir
				  app.fonk(2, 3, (a, b) -> a + b);